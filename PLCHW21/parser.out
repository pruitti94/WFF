Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    FORALL
    IF
    WITH

Grammar

Rule 0     S' -> waeStart
Rule 1     waeStart -> wff SEMI
Rule 2     waeStart -> quant SEMI
Rule 3     arg -> STRING
Rule 4     arg -> NUMBER
Rule 5     arg -> ID
Rule 6     wff -> ID LPARENT wff RPARENT
Rule 7     wff -> arg
Rule 8     wff -> arg COMMA wff
Rule 9     wff -> wff AND wff
Rule 10    wff -> OR wff
Rule 11    wff -> NOT wff
Rule 12    quant -> LPARENT THEREEXISTS quant RPARENT LPARENT wff RPARENT
Rule 13    quant -> arg
Rule 14    quant -> arg COMMA quant

Terminals, with rules where they appear

AND                  : 9
COMMA                : 8 14
FORALL               : 
ID                   : 5 6
IF                   : 
LPARENT              : 6 12 12
NOT                  : 11
NUMBER               : 4
OR                   : 10
RPARENT              : 6 12 12
SEMI                 : 1 2
STRING               : 3
THEREEXISTS          : 12
WITH                 : 
error                : 

Nonterminals, with rules where they appear

arg                  : 7 8 13 14
quant                : 2 12 14
waeStart             : 0
wff                  : 1 6 8 9 9 10 11 12

Parsing method: LALR

state 0

    (0) S' -> . waeStart
    (1) waeStart -> . wff SEMI
    (2) waeStart -> . quant SEMI
    (6) wff -> . ID LPARENT wff RPARENT
    (7) wff -> . arg
    (8) wff -> . arg COMMA wff
    (9) wff -> . wff AND wff
    (10) wff -> . OR wff
    (11) wff -> . NOT wff
    (12) quant -> . LPARENT THEREEXISTS quant RPARENT LPARENT wff RPARENT
    (13) quant -> . arg
    (14) quant -> . arg COMMA quant
    (3) arg -> . STRING
    (4) arg -> . NUMBER
    (5) arg -> . ID

    ID              shift and go to state 4
    OR              shift and go to state 7
    NOT             shift and go to state 8
    LPARENT         shift and go to state 5
    STRING          shift and go to state 9
    NUMBER          shift and go to state 10

    waeStart                       shift and go to state 1
    wff                            shift and go to state 2
    quant                          shift and go to state 3
    arg                            shift and go to state 6

state 1

    (0) S' -> waeStart .



state 2

    (1) waeStart -> wff . SEMI
    (9) wff -> wff . AND wff

    SEMI            shift and go to state 11
    AND             shift and go to state 12


state 3

    (2) waeStart -> quant . SEMI

    SEMI            shift and go to state 13


state 4

    (6) wff -> ID . LPARENT wff RPARENT
    (5) arg -> ID .

    LPARENT         shift and go to state 14
    COMMA           reduce using rule 5 (arg -> ID .)
    SEMI            reduce using rule 5 (arg -> ID .)
    AND             reduce using rule 5 (arg -> ID .)
    RPARENT         reduce using rule 5 (arg -> ID .)


state 5

    (12) quant -> LPARENT . THEREEXISTS quant RPARENT LPARENT wff RPARENT

    THEREEXISTS     shift and go to state 15


state 6

    (7) wff -> arg .
    (8) wff -> arg . COMMA wff
    (13) quant -> arg .
    (14) quant -> arg . COMMA quant

  ! reduce/reduce conflict for SEMI resolved using rule 7 (wff -> arg .)
    SEMI            reduce using rule 7 (wff -> arg .)
    AND             reduce using rule 7 (wff -> arg .)
    COMMA           shift and go to state 16

  ! SEMI            [ reduce using rule 13 (quant -> arg .) ]


state 7

    (10) wff -> OR . wff
    (6) wff -> . ID LPARENT wff RPARENT
    (7) wff -> . arg
    (8) wff -> . arg COMMA wff
    (9) wff -> . wff AND wff
    (10) wff -> . OR wff
    (11) wff -> . NOT wff
    (3) arg -> . STRING
    (4) arg -> . NUMBER
    (5) arg -> . ID

    ID              shift and go to state 4
    OR              shift and go to state 7
    NOT             shift and go to state 8
    STRING          shift and go to state 9
    NUMBER          shift and go to state 10

    wff                            shift and go to state 17
    arg                            shift and go to state 18

state 8

    (11) wff -> NOT . wff
    (6) wff -> . ID LPARENT wff RPARENT
    (7) wff -> . arg
    (8) wff -> . arg COMMA wff
    (9) wff -> . wff AND wff
    (10) wff -> . OR wff
    (11) wff -> . NOT wff
    (3) arg -> . STRING
    (4) arg -> . NUMBER
    (5) arg -> . ID

    ID              shift and go to state 4
    OR              shift and go to state 7
    NOT             shift and go to state 8
    STRING          shift and go to state 9
    NUMBER          shift and go to state 10

    wff                            shift and go to state 19
    arg                            shift and go to state 18

state 9

    (3) arg -> STRING .

    COMMA           reduce using rule 3 (arg -> STRING .)
    SEMI            reduce using rule 3 (arg -> STRING .)
    AND             reduce using rule 3 (arg -> STRING .)
    RPARENT         reduce using rule 3 (arg -> STRING .)


state 10

    (4) arg -> NUMBER .

    COMMA           reduce using rule 4 (arg -> NUMBER .)
    SEMI            reduce using rule 4 (arg -> NUMBER .)
    AND             reduce using rule 4 (arg -> NUMBER .)
    RPARENT         reduce using rule 4 (arg -> NUMBER .)


state 11

    (1) waeStart -> wff SEMI .

    $end            reduce using rule 1 (waeStart -> wff SEMI .)


state 12

    (9) wff -> wff AND . wff
    (6) wff -> . ID LPARENT wff RPARENT
    (7) wff -> . arg
    (8) wff -> . arg COMMA wff
    (9) wff -> . wff AND wff
    (10) wff -> . OR wff
    (11) wff -> . NOT wff
    (3) arg -> . STRING
    (4) arg -> . NUMBER
    (5) arg -> . ID

    ID              shift and go to state 4
    OR              shift and go to state 7
    NOT             shift and go to state 8
    STRING          shift and go to state 9
    NUMBER          shift and go to state 10

    wff                            shift and go to state 20
    arg                            shift and go to state 18

state 13

    (2) waeStart -> quant SEMI .

    $end            reduce using rule 2 (waeStart -> quant SEMI .)


state 14

    (6) wff -> ID LPARENT . wff RPARENT
    (6) wff -> . ID LPARENT wff RPARENT
    (7) wff -> . arg
    (8) wff -> . arg COMMA wff
    (9) wff -> . wff AND wff
    (10) wff -> . OR wff
    (11) wff -> . NOT wff
    (3) arg -> . STRING
    (4) arg -> . NUMBER
    (5) arg -> . ID

    ID              shift and go to state 4
    OR              shift and go to state 7
    NOT             shift and go to state 8
    STRING          shift and go to state 9
    NUMBER          shift and go to state 10

    wff                            shift and go to state 21
    arg                            shift and go to state 18

state 15

    (12) quant -> LPARENT THEREEXISTS . quant RPARENT LPARENT wff RPARENT
    (12) quant -> . LPARENT THEREEXISTS quant RPARENT LPARENT wff RPARENT
    (13) quant -> . arg
    (14) quant -> . arg COMMA quant
    (3) arg -> . STRING
    (4) arg -> . NUMBER
    (5) arg -> . ID

    LPARENT         shift and go to state 5
    STRING          shift and go to state 9
    NUMBER          shift and go to state 10
    ID              shift and go to state 24

    quant                          shift and go to state 22
    arg                            shift and go to state 23

state 16

    (8) wff -> arg COMMA . wff
    (14) quant -> arg COMMA . quant
    (6) wff -> . ID LPARENT wff RPARENT
    (7) wff -> . arg
    (8) wff -> . arg COMMA wff
    (9) wff -> . wff AND wff
    (10) wff -> . OR wff
    (11) wff -> . NOT wff
    (12) quant -> . LPARENT THEREEXISTS quant RPARENT LPARENT wff RPARENT
    (13) quant -> . arg
    (14) quant -> . arg COMMA quant
    (3) arg -> . STRING
    (4) arg -> . NUMBER
    (5) arg -> . ID

    ID              shift and go to state 4
    OR              shift and go to state 7
    NOT             shift and go to state 8
    LPARENT         shift and go to state 5
    STRING          shift and go to state 9
    NUMBER          shift and go to state 10

    arg                            shift and go to state 6
    wff                            shift and go to state 25
    quant                          shift and go to state 26

state 17

    (10) wff -> OR wff .
    (9) wff -> wff . AND wff

  ! shift/reduce conflict for AND resolved as shift
    SEMI            reduce using rule 10 (wff -> OR wff .)
    RPARENT         reduce using rule 10 (wff -> OR wff .)
    AND             shift and go to state 12

  ! AND             [ reduce using rule 10 (wff -> OR wff .) ]


state 18

    (7) wff -> arg .
    (8) wff -> arg . COMMA wff

    AND             reduce using rule 7 (wff -> arg .)
    SEMI            reduce using rule 7 (wff -> arg .)
    RPARENT         reduce using rule 7 (wff -> arg .)
    COMMA           shift and go to state 27


state 19

    (11) wff -> NOT wff .
    (9) wff -> wff . AND wff

  ! shift/reduce conflict for AND resolved as shift
    SEMI            reduce using rule 11 (wff -> NOT wff .)
    RPARENT         reduce using rule 11 (wff -> NOT wff .)
    AND             shift and go to state 12

  ! AND             [ reduce using rule 11 (wff -> NOT wff .) ]


state 20

    (9) wff -> wff AND wff .
    (9) wff -> wff . AND wff

  ! shift/reduce conflict for AND resolved as shift
    SEMI            reduce using rule 9 (wff -> wff AND wff .)
    RPARENT         reduce using rule 9 (wff -> wff AND wff .)
    AND             shift and go to state 12

  ! AND             [ reduce using rule 9 (wff -> wff AND wff .) ]


state 21

    (6) wff -> ID LPARENT wff . RPARENT
    (9) wff -> wff . AND wff

    RPARENT         shift and go to state 28
    AND             shift and go to state 12


state 22

    (12) quant -> LPARENT THEREEXISTS quant . RPARENT LPARENT wff RPARENT

    RPARENT         shift and go to state 29


state 23

    (13) quant -> arg .
    (14) quant -> arg . COMMA quant

    RPARENT         reduce using rule 13 (quant -> arg .)
    COMMA           shift and go to state 30


state 24

    (5) arg -> ID .

    COMMA           reduce using rule 5 (arg -> ID .)
    RPARENT         reduce using rule 5 (arg -> ID .)


state 25

    (8) wff -> arg COMMA wff .
    (9) wff -> wff . AND wff

  ! shift/reduce conflict for AND resolved as shift
    SEMI            reduce using rule 8 (wff -> arg COMMA wff .)
    RPARENT         reduce using rule 8 (wff -> arg COMMA wff .)
    AND             shift and go to state 12

  ! AND             [ reduce using rule 8 (wff -> arg COMMA wff .) ]


state 26

    (14) quant -> arg COMMA quant .

    SEMI            reduce using rule 14 (quant -> arg COMMA quant .)
    RPARENT         reduce using rule 14 (quant -> arg COMMA quant .)


state 27

    (8) wff -> arg COMMA . wff
    (6) wff -> . ID LPARENT wff RPARENT
    (7) wff -> . arg
    (8) wff -> . arg COMMA wff
    (9) wff -> . wff AND wff
    (10) wff -> . OR wff
    (11) wff -> . NOT wff
    (3) arg -> . STRING
    (4) arg -> . NUMBER
    (5) arg -> . ID

    ID              shift and go to state 4
    OR              shift and go to state 7
    NOT             shift and go to state 8
    STRING          shift and go to state 9
    NUMBER          shift and go to state 10

    arg                            shift and go to state 18
    wff                            shift and go to state 25

state 28

    (6) wff -> ID LPARENT wff RPARENT .

    SEMI            reduce using rule 6 (wff -> ID LPARENT wff RPARENT .)
    AND             reduce using rule 6 (wff -> ID LPARENT wff RPARENT .)
    RPARENT         reduce using rule 6 (wff -> ID LPARENT wff RPARENT .)


state 29

    (12) quant -> LPARENT THEREEXISTS quant RPARENT . LPARENT wff RPARENT

    LPARENT         shift and go to state 31


state 30

    (14) quant -> arg COMMA . quant
    (12) quant -> . LPARENT THEREEXISTS quant RPARENT LPARENT wff RPARENT
    (13) quant -> . arg
    (14) quant -> . arg COMMA quant
    (3) arg -> . STRING
    (4) arg -> . NUMBER
    (5) arg -> . ID

    LPARENT         shift and go to state 5
    STRING          shift and go to state 9
    NUMBER          shift and go to state 10
    ID              shift and go to state 24

    arg                            shift and go to state 23
    quant                          shift and go to state 26

state 31

    (12) quant -> LPARENT THEREEXISTS quant RPARENT LPARENT . wff RPARENT
    (6) wff -> . ID LPARENT wff RPARENT
    (7) wff -> . arg
    (8) wff -> . arg COMMA wff
    (9) wff -> . wff AND wff
    (10) wff -> . OR wff
    (11) wff -> . NOT wff
    (3) arg -> . STRING
    (4) arg -> . NUMBER
    (5) arg -> . ID

    ID              shift and go to state 4
    OR              shift and go to state 7
    NOT             shift and go to state 8
    STRING          shift and go to state 9
    NUMBER          shift and go to state 10

    wff                            shift and go to state 32
    arg                            shift and go to state 18

state 32

    (12) quant -> LPARENT THEREEXISTS quant RPARENT LPARENT wff . RPARENT
    (9) wff -> wff . AND wff

    RPARENT         shift and go to state 33
    AND             shift and go to state 12


state 33

    (12) quant -> LPARENT THEREEXISTS quant RPARENT LPARENT wff RPARENT .

    SEMI            reduce using rule 12 (quant -> LPARENT THEREEXISTS quant RPARENT LPARENT wff RPARENT .)
    RPARENT         reduce using rule 12 (quant -> LPARENT THEREEXISTS quant RPARENT LPARENT wff RPARENT .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 17 resolved as shift
WARNING: shift/reduce conflict for AND in state 19 resolved as shift
WARNING: shift/reduce conflict for AND in state 20 resolved as shift
WARNING: shift/reduce conflict for AND in state 25 resolved as shift
WARNING: reduce/reduce conflict in state 6 resolved using rule (wff -> arg)
WARNING: rejected rule (quant -> arg) in state 6
